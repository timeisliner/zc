/* 
testzcTask.0.1.vj 2018-5-8 17:58:57


require
zcOutput.0.2.vj 2018-5-4 20:49:19
zcTrigger.0.1.vj 2018-5-7 19:03:14


test lib
zcTask.0.1.vj 2018-5-8 16:57:23


*/

scope testzcTask initializer init

globals
  private boolean tested = false
  
  private constant string ENTRY = "-"
  private constant string TEST = "c"
  private constant string ORDER = "t"
  
  private real gametime = 0             // 游戏时间
  private zcTasks min = 0           // 执行的周期任务中 最快要到期的任务
  private zcTasks now = 0           // 当前准备执行的任务
  private integer count = 0           // 最大任务数
  private integer next = 0          // 下一个要被执行的任务
  private zcOutputs out = 0         // 信息显示
  private zcChats chat = 0          // 聊天检测
  private integer array tasks[30]   // 任务存储
  
  
  private group g = CreateGroup()
endglobals

private function timerAction takes nothing returns nothing
  local integer n = 0   // 循环所有任务 初始下标
  local zcTasks task    // 临时存放循环的任务
  set gametime = gametime + 1   // 计时
  
  call out.show("当前时间:" + R2S(gametime))
  
  if min !=0 and min.isTime(gametime) then   // 最近的任务到期
    set min.time = gametime               // 标记 当前时间 初始化计时             
    call out.show(min.message + min.info())        // 发出 最近到期 任务消息
    call min.working(g)               // 执行 最近到期 任务内容
    
    loop
      set task = tasks[n]   // 存储任务
      if task.isOn() and task.id != min.id then   // 检查 任务 是否开启 且 不能是 任务 min
        if task.isTime(gametime) then     // 任务到期 判定
          set task.time = gametime               // 标记 当前时间 初始化计时             
          call out.show(task.message + task.info())        // 发出 最近到期 任务消息
          call task.working(g)               // 执行 最近到期 任务内容  
        elseif task.isTime(min.time + min.timeout) then   // 如果 task下一次执行时间 小于 min 下次执行时间 则
          set min = task
        endif
      endif
      set n = n + 1
      exitwhen n >= next
    endloop
  endif
  
  if next >= count then
    // 所有准备任务都已经加入执行计划
    set now = 0     // 清空标记
    return    
  endif
  
  
  if now.runnable(gametime) then          // 检查当前任务时间
    set now.time = gametime               // 标记 当前时间 初始化计时
    call now.on()                     // 开启 任务
    call out.show(now.message + now.info())        // 首次 发出 任务消息
    call now.working(g)               // 首次 执行任务内容
    
    if now.isOn() and min == 0 then   // 如果当前任务是周期任务 并且已经开启 同时 min 没有指定任务 则
      set min = now
    endif
    
    set next = next + 1               // 指向 下一个任务
    set now = tasks[next]             // 将下一个任务 设置为 当前任务
  endif
endfunction

private function onTimer takes nothing returns nothing
  local real timeout = 1
  local boolean periodic = true
  local zcTriggers zct = zcTriggers.create()
    
  call TriggerRegisterTimerEvent(zct.trg, timeout, periodic)
  call TriggerAddAction(zct.trg, function timerAction )
  

endfunction

private function onTask takes nothing returns nothing
  local integer i = 0
  
  // 初始化 任务
  set tasks[i] = zcTasks.create(i, GetRandomReal(0, 1) , true, 0. , 5. , "刷怪了!", 'hfoo', 2, zcPoints.create(0, 0, 0), Player(i))
  set i = i + 1
  set tasks[i] = zcTasks.create(i, GetRandomReal(0, 1) , true, 0. , 5. , "刷怪了!", 'hfoo', 2, zcPoints.create(0, 0, 0), Player(i))
  set i = i + 1
  set tasks[i] = zcTasks.create(i, GetRandomReal(0, 1) , true, 0. , 5. , "刷怪了!", 'hfoo', 2, zcPoints.create(0, 0, 0), Player(i))
  set i = i + 1
  set tasks[i] = zcTasks.create(i, GetRandomReal(0, 1) , true, 0. , 5. , "刷怪了!", 'hfoo', 2, zcPoints.create(0, 0, 0), Player(i))
  set i = i + 1
  set tasks[i] = zcTasks.create(i, GetRandomReal(0, 1) , true, 0. , 5. , "刷怪了!", 'hfoo', 2, zcPoints.create(0, 0, 0), Player(i))
  set i = i + 1
  set tasks[i] = zcTasks.create(i, GetRandomReal(0, 1) , true, 0. , 5. , "刷怪了!", 'hfoo', 2, zcPoints.create(0, 0, 0), Player(i))
  set i = i + 1
  set tasks[i] = zcTasks.create(i, GetRandomReal(0, 1) , true, 0. , 5. , "刷怪了!", 'hfoo', 2, zcPoints.create(0, 0, 0), Player(i))
  set i = i + 1
  set tasks[i] = zcTasks.create(i, GetRandomReal(0, 1) , true, 0. , 5. , "刷怪了!", 'hfoo', 2, zcPoints.create(0, 0, 0), Player(i))
  set i = i + 1
  set tasks[i] = zcTasks.create(i, GetRandomReal(0, 1) , true, 0. , 5. , "刷怪了!", 'hfoo', 2, zcPoints.create(0, 0, 0), Player(i))
  set i = i + 1
  set tasks[i] = zcTasks.create(i, GetRandomReal(0, 1) , true, 0. , 5. , "刷怪了!", 'hfoo', 2, zcPoints.create(0, 0, 0), Player(i))
  set i = i + 1
  set tasks[i] = zcTasks.create(i, GetRandomReal(0, 1) , true, 0. , 5. , "刷怪了!", 'hfoo', 2, zcPoints.create(0, 0, 0), Player(i))
  set i = i + 1
  set tasks[i] = zcTasks.create(i, GetRandomReal(0, 1) , true, 0. , 5. , "刷怪了!", 'hfoo', 2, zcPoints.create(0, 0, 0), Player(i))
  set i = i + 1
  
  set count = i           // 记录最大任务数
  set next = 0            // 标记下一个准备执行的任务
  set now = tasks[next]   // 存储下一个准备执行的任务
endfunction

private function chatAction takes nothing returns nothing
  local string t = GetEventPlayerChatString()
  local string mt = GetEventPlayerChatStringMatched()
  local integer length = StringLength(t)
  local integer order
  
  
  local string entry = SubString(t, 1, 2)
  local string space = SubString(t, 2, 3)
  
  call out.show("信息：" + t + " 长度：" + I2S(length))

  
  if length > 3 and space == " " then
    if entry == TEST  then
      call out.show("有效信息：" + SubString(t, 3, 10))
    elseif entry == "o" then
      if length == 5 and SubString(t, 3, 5) == "on" then
        call chat.on()
      elseif length == 6 and SubString(t, 3, 6) == "off" then
        call chat.off()
      else
        call out.show("错误信息：" + t + "指令系统关闭中...")
        call chat.destroy()
      endif
    elseif entry == ORDER then
      if length == 4 then
        set order = S2I(SubString(t, 3, 4))
        call out.show("order : " + I2S(order))
      elseif length == 5 then
        set order = S2I(SubString(t, 3, 5))
        call out.show("order : " + I2S(order))
      else
        call out.show("错误信息：" + t + " .. 跳过 ...")
      endif
    endif
  endif
  
  
  //call out.show("GetEventPlayerChatString " + t)
  //call out.show("GetEventPlayerChatStringMatched " + mt)
  //call out.show("StringCase upper:true" + StringCase(t, true))
  //call out.show("StringCase upper:false " + StringCase(t, false))
  //call out.show("GetLocalizedString " + GetLocalizedString(t))
  //call out.show("StringLength " + I2S(StringLength(t)))
  //call out.show("SubString 3 - 10 " + SubString(t, 3, 10))
  //call out.show("SubString 0 - 2" + SubString(t, 0, 2))
  //call out.show("StringHash " + I2S(StringHash(t)))
endfunction

// 输入指令检测
// 指令标识 -
private function onChat takes nothing returns nothing
  local player p = Player(0)
  set chat = zcChats.create(zcTriggers.create(), p)
  set chat.exact = false
  
  call chat.run(ENTRY, function chatAction)
  
  if chat.exact then
    call out.show("精确匹配：ON")
  else
    call out.show("精确匹配：OFF")
  endif
  

  call out.show("输入： -c info")
  call out.show("开启触发： -o on")
  call out.show("关闭触发： -o off")
  
  set p = null
endfunction



private function init takes nothing returns nothing
  // Test
  if tested then
    return
  else
    set tested = true
  endif
  call FogEnable(false)
  call FogMaskEnable(false)
  
  // lib zcOutput
  set out = zcOutputs.create("")
  set out.duration = 200
  
  // init timer
  call onTimer()
  
  // lib testzcChat
  call onChat()
  
  // test lib zcTask
  call onTask()
  

endfunction


endscope
